package com.akaiyuki.partyphile.passportapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.akaiyuki.partyphile.passportapp.dao.PAppSettings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPP_SETTINGS".
*/
public class PAppSettingsDao extends AbstractDao<PAppSettings, Long> {

    public static final String TABLENAME = "PAPP_SETTINGS";

    /**
     * Properties of entity PAppSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Archived = new Property(1, Boolean.class, "archived", false, "ARCHIVED");
        public final static Property DateUpdated = new Property(2, java.util.Date.class, "dateUpdated", false, "DATE_UPDATED");
        public final static Property GroupOrder = new Property(3, Integer.class, "groupOrder", false, "GROUP_ORDER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property SortOrder = new Property(5, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property Tags = new Property(6, String.class, "tags", false, "TAGS");
        public final static Property TimeStamp = new Property(7, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Pid = new Property(8, Long.class, "pid", false, "PID");
        public final static Property Is_secure = new Property(9, Integer.class, "is_secure", false, "IS_SECURE");
        public final static Property Adhoc_base_path = new Property(10, String.class, "adhoc_base_path", false, "ADHOC_BASE_PATH");
        public final static Property Test_base_path = new Property(11, String.class, "test_base_path", false, "TEST_BASE_PATH");
        public final static Property Staging_base_path = new Property(12, String.class, "staging_base_path", false, "STAGING_BASE_PATH");
        public final static Property Prod_base_path = new Property(13, String.class, "prod_base_path", false, "PROD_BASE_PATH");
        public final static Property Api_resource_path = new Property(14, String.class, "api_resource_path", false, "API_RESOURCE_PATH");
        public final static Property Active_path = new Property(15, Integer.class, "active_path", false, "ACTIVE_PATH");
        public final static Property Is_app_active = new Property(16, Integer.class, "is_app_active", false, "IS_APP_ACTIVE");
        public final static Property Is_app_needs_update = new Property(17, Integer.class, "is_app_needs_update", false, "IS_APP_NEEDS_UPDATE");
        public final static Property Is_paypal_active = new Property(18, Integer.class, "is_paypal_active", false, "IS_PAYPAL_ACTIVE");
        public final static Property Is_dragonpay_active = new Property(19, Integer.class, "is_dragonpay_active", false, "IS_DRAGONPAY_ACTIVE");
        public final static Property Is_globelabs_active = new Property(20, Integer.class, "is_globelabs_active", false, "IS_GLOBELABS_ACTIVE");
        public final static Property Will_force_close_when_cancelled_updates = new Property(21, Integer.class, "will_force_close_when_cancelled_updates", false, "WILL_FORCE_CLOSE_WHEN_CANCELLED_UPDATES");
        public final static Property Allow_ads = new Property(22, Integer.class, "allow_ads", false, "ALLOW_ADS");
        public final static Property Event_main_pics_path = new Property(23, String.class, "event_main_pics_path", false, "EVENT_MAIN_PICS_PATH");
        public final static Property Event_banner_pics_path = new Property(24, String.class, "event_banner_pics_path", false, "EVENT_BANNER_PICS_PATH");
        public final static Property Venue_main_pics_path = new Property(25, String.class, "venue_main_pics_path", false, "VENUE_MAIN_PICS_PATH");
        public final static Property Venue_banner_pics_path = new Property(26, String.class, "venue_banner_pics_path", false, "VENUE_BANNER_PICS_PATH");
        public final static Property Booth_map_path = new Property(27, String.class, "booth_map_path", false, "BOOTH_MAP_PATH");
        public final static Property Pass_pic_path = new Property(28, String.class, "pass_pic_path", false, "PASS_PIC_PATH");
        public final static Property Distance_threshold = new Property(29, Integer.class, "distance_threshold", false, "DISTANCE_THRESHOLD");
        public final static Property Cities = new Property(30, String.class, "cities", false, "CITIES");
        public final static Property Interstitial = new Property(31, String.class, "interstitial", false, "INTERSTITIAL");
    };


    public PAppSettingsDao(DaoConfig config) {
        super(config);
    }
    
    public PAppSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPP_SETTINGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ARCHIVED\" INTEGER," + // 1: archived
                "\"DATE_UPDATED\" INTEGER," + // 2: dateUpdated
                "\"GROUP_ORDER\" INTEGER," + // 3: groupOrder
                "\"NAME\" TEXT," + // 4: name
                "\"SORT_ORDER\" INTEGER," + // 5: sortOrder
                "\"TAGS\" TEXT," + // 6: tags
                "\"TIME_STAMP\" TEXT," + // 7: timeStamp
                "\"PID\" INTEGER," + // 8: pid
                "\"IS_SECURE\" INTEGER," + // 9: is_secure
                "\"ADHOC_BASE_PATH\" TEXT," + // 10: adhoc_base_path
                "\"TEST_BASE_PATH\" TEXT," + // 11: test_base_path
                "\"STAGING_BASE_PATH\" TEXT," + // 12: staging_base_path
                "\"PROD_BASE_PATH\" TEXT," + // 13: prod_base_path
                "\"API_RESOURCE_PATH\" TEXT," + // 14: api_resource_path
                "\"ACTIVE_PATH\" INTEGER," + // 15: active_path
                "\"IS_APP_ACTIVE\" INTEGER," + // 16: is_app_active
                "\"IS_APP_NEEDS_UPDATE\" INTEGER," + // 17: is_app_needs_update
                "\"IS_PAYPAL_ACTIVE\" INTEGER," + // 18: is_paypal_active
                "\"IS_DRAGONPAY_ACTIVE\" INTEGER," + // 19: is_dragonpay_active
                "\"IS_GLOBELABS_ACTIVE\" INTEGER," + // 20: is_globelabs_active
                "\"WILL_FORCE_CLOSE_WHEN_CANCELLED_UPDATES\" INTEGER," + // 21: will_force_close_when_cancelled_updates
                "\"ALLOW_ADS\" INTEGER," + // 22: allow_ads
                "\"EVENT_MAIN_PICS_PATH\" TEXT," + // 23: event_main_pics_path
                "\"EVENT_BANNER_PICS_PATH\" TEXT," + // 24: event_banner_pics_path
                "\"VENUE_MAIN_PICS_PATH\" TEXT," + // 25: venue_main_pics_path
                "\"VENUE_BANNER_PICS_PATH\" TEXT," + // 26: venue_banner_pics_path
                "\"BOOTH_MAP_PATH\" TEXT," + // 27: booth_map_path
                "\"PASS_PIC_PATH\" TEXT," + // 28: pass_pic_path
                "\"DISTANCE_THRESHOLD\" INTEGER," + // 29: distance_threshold
                "\"CITIES\" TEXT," + // 30: cities
                "\"INTERSTITIAL\" TEXT);"); // 31: interstitial
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPP_SETTINGS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PAppSettings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean archived = entity.getArchived();
        if (archived != null) {
            stmt.bindLong(2, archived ? 1L: 0L);
        }
 
        java.util.Date dateUpdated = entity.getDateUpdated();
        if (dateUpdated != null) {
            stmt.bindLong(3, dateUpdated.getTime());
        }
 
        Integer groupOrder = entity.getGroupOrder();
        if (groupOrder != null) {
            stmt.bindLong(4, groupOrder);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(6, sortOrder);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(7, tags);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(8, timeStamp);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(9, pid);
        }
 
        Integer is_secure = entity.getIs_secure();
        if (is_secure != null) {
            stmt.bindLong(10, is_secure);
        }
 
        String adhoc_base_path = entity.getAdhoc_base_path();
        if (adhoc_base_path != null) {
            stmt.bindString(11, adhoc_base_path);
        }
 
        String test_base_path = entity.getTest_base_path();
        if (test_base_path != null) {
            stmt.bindString(12, test_base_path);
        }
 
        String staging_base_path = entity.getStaging_base_path();
        if (staging_base_path != null) {
            stmt.bindString(13, staging_base_path);
        }
 
        String prod_base_path = entity.getProd_base_path();
        if (prod_base_path != null) {
            stmt.bindString(14, prod_base_path);
        }
 
        String api_resource_path = entity.getApi_resource_path();
        if (api_resource_path != null) {
            stmt.bindString(15, api_resource_path);
        }
 
        Integer active_path = entity.getActive_path();
        if (active_path != null) {
            stmt.bindLong(16, active_path);
        }
 
        Integer is_app_active = entity.getIs_app_active();
        if (is_app_active != null) {
            stmt.bindLong(17, is_app_active);
        }
 
        Integer is_app_needs_update = entity.getIs_app_needs_update();
        if (is_app_needs_update != null) {
            stmt.bindLong(18, is_app_needs_update);
        }
 
        Integer is_paypal_active = entity.getIs_paypal_active();
        if (is_paypal_active != null) {
            stmt.bindLong(19, is_paypal_active);
        }
 
        Integer is_dragonpay_active = entity.getIs_dragonpay_active();
        if (is_dragonpay_active != null) {
            stmt.bindLong(20, is_dragonpay_active);
        }
 
        Integer is_globelabs_active = entity.getIs_globelabs_active();
        if (is_globelabs_active != null) {
            stmt.bindLong(21, is_globelabs_active);
        }
 
        Integer will_force_close_when_cancelled_updates = entity.getWill_force_close_when_cancelled_updates();
        if (will_force_close_when_cancelled_updates != null) {
            stmt.bindLong(22, will_force_close_when_cancelled_updates);
        }
 
        Integer allow_ads = entity.getAllow_ads();
        if (allow_ads != null) {
            stmt.bindLong(23, allow_ads);
        }
 
        String event_main_pics_path = entity.getEvent_main_pics_path();
        if (event_main_pics_path != null) {
            stmt.bindString(24, event_main_pics_path);
        }
 
        String event_banner_pics_path = entity.getEvent_banner_pics_path();
        if (event_banner_pics_path != null) {
            stmt.bindString(25, event_banner_pics_path);
        }
 
        String venue_main_pics_path = entity.getVenue_main_pics_path();
        if (venue_main_pics_path != null) {
            stmt.bindString(26, venue_main_pics_path);
        }
 
        String venue_banner_pics_path = entity.getVenue_banner_pics_path();
        if (venue_banner_pics_path != null) {
            stmt.bindString(27, venue_banner_pics_path);
        }
 
        String booth_map_path = entity.getBooth_map_path();
        if (booth_map_path != null) {
            stmt.bindString(28, booth_map_path);
        }
 
        String pass_pic_path = entity.getPass_pic_path();
        if (pass_pic_path != null) {
            stmt.bindString(29, pass_pic_path);
        }
 
        Integer distance_threshold = entity.getDistance_threshold();
        if (distance_threshold != null) {
            stmt.bindLong(30, distance_threshold);
        }
 
        String cities = entity.getCities();
        if (cities != null) {
            stmt.bindString(31, cities);
        }
 
        String interstitial = entity.getInterstitial();
        if (interstitial != null) {
            stmt.bindString(32, interstitial);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PAppSettings readEntity(Cursor cursor, int offset) {
        PAppSettings entity = new PAppSettings( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // archived
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateUpdated
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // groupOrder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sortOrder
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tags
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeStamp
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // pid
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // is_secure
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // adhoc_base_path
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // test_base_path
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // staging_base_path
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // prod_base_path
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // api_resource_path
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // active_path
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // is_app_active
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // is_app_needs_update
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // is_paypal_active
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // is_dragonpay_active
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // is_globelabs_active
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // will_force_close_when_cancelled_updates
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // allow_ads
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // event_main_pics_path
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // event_banner_pics_path
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // venue_main_pics_path
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // venue_banner_pics_path
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // booth_map_path
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // pass_pic_path
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // distance_threshold
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // cities
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // interstitial
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PAppSettings entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArchived(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDateUpdated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setGroupOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortOrder(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTags(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeStamp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPid(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIs_secure(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAdhoc_base_path(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTest_base_path(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStaging_base_path(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProd_base_path(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setApi_resource_path(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setActive_path(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIs_app_active(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIs_app_needs_update(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setIs_paypal_active(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIs_dragonpay_active(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setIs_globelabs_active(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setWill_force_close_when_cancelled_updates(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAllow_ads(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setEvent_main_pics_path(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEvent_banner_pics_path(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setVenue_main_pics_path(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVenue_banner_pics_path(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setBooth_map_path(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPass_pic_path(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDistance_threshold(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setCities(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setInterstitial(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PAppSettings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PAppSettings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
