package com.akaiyuki.partyphile.passportapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.akaiyuki.partyphile.passportapp.dao.PEvents;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEVENTS".
*/
public class PEventsDao extends AbstractDao<PEvents, Long> {

    public static final String TABLENAME = "PEVENTS";

    /**
     * Properties of entity PEvents.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Archived = new Property(1, Boolean.class, "archived", false, "ARCHIVED");
        public final static Property DateUpdated = new Property(2, java.util.Date.class, "dateUpdated", false, "DATE_UPDATED");
        public final static Property GroupOrder = new Property(3, Integer.class, "groupOrder", false, "GROUP_ORDER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property SortOrder = new Property(5, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property Tags = new Property(6, String.class, "tags", false, "TAGS");
        public final static Property TimeStamp = new Property(7, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Pid = new Property(8, Long.class, "pid", false, "PID");
        public final static Property Eventname = new Property(9, String.class, "Eventname", false, "EVENTNAME");
        public final static Property Venue = new Property(10, String.class, "venue", false, "VENUE");
        public final static Property Event_datetime = new Property(11, String.class, "event_datetime", false, "EVENT_DATETIME");
        public final static Property Booth_map_img = new Property(12, String.class, "booth_map_img", false, "BOOTH_MAP_IMG");
        public final static Property Main_pic = new Property(13, String.class, "main_pic", false, "MAIN_PIC");
        public final static Property Banner_pic = new Property(14, String.class, "banner_pic", false, "BANNER_PIC");
        public final static Property Cutoff_datetime = new Property(15, String.class, "cutoff_datetime", false, "CUTOFF_DATETIME");
        public final static Property Priority = new Property(16, Integer.class, "priority", false, "PRIORITY");
        public final static Property Keywords = new Property(17, String.class, "keywords", false, "KEYWORDS");
        public final static Property Is_featured = new Property(18, Integer.class, "is_featured", false, "IS_FEATURED");
        public final static Property Is_exclusive = new Property(19, Integer.class, "is_exclusive", false, "IS_EXCLUSIVE");
        public final static Property Max_attendees = new Property(20, Integer.class, "max_attendees", false, "MAX_ATTENDEES");
        public final static Property Attendees_count = new Property(21, Integer.class, "attendees_count", false, "ATTENDEES_COUNT");
        public final static Property Longlitude = new Property(22, Double.class, "longlitude", false, "LONGLITUDE");
        public final static Property Latitude = new Property(23, Double.class, "latitude", false, "LATITUDE");
    };


    public PEventsDao(DaoConfig config) {
        super(config);
    }
    
    public PEventsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEVENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ARCHIVED\" INTEGER," + // 1: archived
                "\"DATE_UPDATED\" INTEGER," + // 2: dateUpdated
                "\"GROUP_ORDER\" INTEGER," + // 3: groupOrder
                "\"NAME\" TEXT," + // 4: name
                "\"SORT_ORDER\" INTEGER," + // 5: sortOrder
                "\"TAGS\" TEXT," + // 6: tags
                "\"TIME_STAMP\" TEXT," + // 7: timeStamp
                "\"PID\" INTEGER," + // 8: pid
                "\"EVENTNAME\" TEXT," + // 9: Eventname
                "\"VENUE\" TEXT," + // 10: venue
                "\"EVENT_DATETIME\" TEXT," + // 11: event_datetime
                "\"BOOTH_MAP_IMG\" TEXT," + // 12: booth_map_img
                "\"MAIN_PIC\" TEXT," + // 13: main_pic
                "\"BANNER_PIC\" TEXT," + // 14: banner_pic
                "\"CUTOFF_DATETIME\" TEXT," + // 15: cutoff_datetime
                "\"PRIORITY\" INTEGER," + // 16: priority
                "\"KEYWORDS\" TEXT," + // 17: keywords
                "\"IS_FEATURED\" INTEGER," + // 18: is_featured
                "\"IS_EXCLUSIVE\" INTEGER," + // 19: is_exclusive
                "\"MAX_ATTENDEES\" INTEGER," + // 20: max_attendees
                "\"ATTENDEES_COUNT\" INTEGER," + // 21: attendees_count
                "\"LONGLITUDE\" REAL," + // 22: longlitude
                "\"LATITUDE\" REAL);"); // 23: latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEVENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PEvents entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean archived = entity.getArchived();
        if (archived != null) {
            stmt.bindLong(2, archived ? 1L: 0L);
        }
 
        java.util.Date dateUpdated = entity.getDateUpdated();
        if (dateUpdated != null) {
            stmt.bindLong(3, dateUpdated.getTime());
        }
 
        Integer groupOrder = entity.getGroupOrder();
        if (groupOrder != null) {
            stmt.bindLong(4, groupOrder);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(6, sortOrder);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(7, tags);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(8, timeStamp);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(9, pid);
        }
 
        String Eventname = entity.getEventname();
        if (Eventname != null) {
            stmt.bindString(10, Eventname);
        }
 
        String venue = entity.getVenue();
        if (venue != null) {
            stmt.bindString(11, venue);
        }
 
        String event_datetime = entity.getEvent_datetime();
        if (event_datetime != null) {
            stmt.bindString(12, event_datetime);
        }
 
        String booth_map_img = entity.getBooth_map_img();
        if (booth_map_img != null) {
            stmt.bindString(13, booth_map_img);
        }
 
        String main_pic = entity.getMain_pic();
        if (main_pic != null) {
            stmt.bindString(14, main_pic);
        }
 
        String banner_pic = entity.getBanner_pic();
        if (banner_pic != null) {
            stmt.bindString(15, banner_pic);
        }
 
        String cutoff_datetime = entity.getCutoff_datetime();
        if (cutoff_datetime != null) {
            stmt.bindString(16, cutoff_datetime);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(17, priority);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(18, keywords);
        }
 
        Integer is_featured = entity.getIs_featured();
        if (is_featured != null) {
            stmt.bindLong(19, is_featured);
        }
 
        Integer is_exclusive = entity.getIs_exclusive();
        if (is_exclusive != null) {
            stmt.bindLong(20, is_exclusive);
        }
 
        Integer max_attendees = entity.getMax_attendees();
        if (max_attendees != null) {
            stmt.bindLong(21, max_attendees);
        }
 
        Integer attendees_count = entity.getAttendees_count();
        if (attendees_count != null) {
            stmt.bindLong(22, attendees_count);
        }
 
        Double longlitude = entity.getLonglitude();
        if (longlitude != null) {
            stmt.bindDouble(23, longlitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(24, latitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PEvents readEntity(Cursor cursor, int offset) {
        PEvents entity = new PEvents( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // archived
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateUpdated
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // groupOrder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sortOrder
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tags
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeStamp
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // pid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Eventname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // venue
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // event_datetime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // booth_map_img
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // main_pic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // banner_pic
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cutoff_datetime
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // priority
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // keywords
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // is_featured
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // is_exclusive
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // max_attendees
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // attendees_count
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // longlitude
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23) // latitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PEvents entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArchived(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDateUpdated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setGroupOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortOrder(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTags(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeStamp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPid(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setEventname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVenue(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEvent_datetime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBooth_map_img(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMain_pic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBanner_pic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCutoff_datetime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPriority(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setKeywords(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIs_featured(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIs_exclusive(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setMax_attendees(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAttendees_count(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setLonglitude(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setLatitude(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PEvents entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PEvents entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
